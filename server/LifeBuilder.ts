// src/builders/LifeBuilder.ts

import { Life } from '../src/models/Life';
import { LifeProfile } from '../src/types/life';
import { generateLifePrompt } from '../src/prompts/life';
import { LifeBase } from '../src/utils/lifeGeneration';

// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–¥–µ–ª–∏ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ OpenAI, Mistral, DeepSeek –∏ —Ç.–¥.)
export interface LLMClient {
  generate(prompt: string): Promise<string>;
}

export class LifeBuilder {
  private llm: LLMClient;

  constructor(llm: LLMClient) {
    this.llm = llm;
  }

  public async createLife(base: LifeBase): Promise<Life> {

    
    let rawResponse: string;
    try {
      rawResponse = await this.llm.generate(generateLifePrompt(base));
    } catch (err) {
      throw new Error(`–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ LLM: ${err}`);
    }
    const match = rawResponse.match(/```json\s*([\s\S]*?)```/i);
    const jsonString = match ? match[1] : rawResponse;
    let profileData: LifeProfile;
    try {
      profileData = JSON.parse(jsonString);
    } catch (err) {
      console.warn('–û—Ç–≤–µ—Ç –æ—Ç LLM:', rawResponse);
      throw new Error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –æ—Ç LLM');
    }

    // üí• –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π)

    return new Life(profileData);
  }
}
