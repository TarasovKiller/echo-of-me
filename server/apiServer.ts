import express, { Request, Response } from 'express';
import bodyParser from 'body-parser';
import cors from 'cors';
import dotenv from 'dotenv';

import { LangChainFactory } from '../src/llm/LangChainFactory';
import { generateLifeBase } from '../src/utils/lifeGeneration';
import { LifeProfile, LifeTraits } from '../src/types/life';
import { Dilemma } from '../src/types/dilemma';

dotenv.config();

const app = express();
const port = process.env.PORT || 4000;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LangChain —Ñ–∞–±—Ä–∏–∫–∏
const apiKey = process.env.OPENAI_API_KEY;
if (!apiKey) {
  console.error('‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env');
  process.exit(1);
}

const langChainFactory = LangChainFactory.getInstance(apiKey);

// üß¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ Life
app.post('/api/generate-life', async (req: Request, res: Response) => {
  try {
    const base = generateLifeBase();
    const lifeChain = langChainFactory.getLifeGenerationChain();
    const lifeProfile = await lifeChain.generateLife(base);
    
    console.log('‚úÖ Life —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', lifeProfile.name);
    res.json(lifeProfile);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Life:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏' });
  }
});

// üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–ª–µ–º–º—ã
app.post('/api/generate-dilemma', async (req: Request, res: Response) => {
  try {
    const { lifeProfile, countryContext, settlementContext, familyContext, socialContext } = req.body;
    
    if (!lifeProfile) {
      return res.status(400).json({ error: 'lifeProfile –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    const dilemmaChain = langChainFactory.getDilemmaGenerationChain();
    const dilemma = await dilemmaChain.generateDilemma(
      lifeProfile,
      countryContext || '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –†–æ—Å—Å–∏—è',
      settlementContext || '–°—Ä–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥',
      familyContext || '–ü–æ–ª–Ω–∞—è —Å–µ–º—å—è, —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Å—Ç–∞—Ç–æ–∫',
      socialContext || '–®–∫–æ–ª—å–Ω—ã–µ –¥—Ä—É–∑—å—è, —É—á–∏—Ç–µ–ª—è'
    );
    
    console.log('‚úÖ –î–∏–ª–µ–º–º–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
    res.json(dilemma);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–ª–µ–º–º—ã:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–ª–µ–º–º—ã' });
  }
});

// üß† –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è —Å–æ–≤–µ—Ç–∞
app.post('/api/analyze-advice', async (req: Request, res: Response) => {
  try {
    const { advice, lifeProfile, situation, question, dilemmaContext } = req.body;
    
    if (!advice || !lifeProfile) {
      return res.status(400).json({ error: 'advice –∏ lifeProfile –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const adviceChain = langChainFactory.getAdviceAnalysisChain();
    const analysis = await adviceChain.analyzeSingleAdvice(
      advice,
      lifeProfile,
      situation || '–°–ª–æ–∂–Ω–∞—è –∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è',
      question || '–ß—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å?',
      dilemmaContext || '–ù—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ'
    );
    
    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–µ—Ç–∞ –∑–∞–≤–µ—Ä—à—ë–Ω');
    res.json(analysis);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–µ—Ç–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–µ—Ç–∞' });
  }
});

// üéØ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏ –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —Å–æ–≤–µ—Ç–∞
app.post('/api/compare-advices', async (req: Request, res: Response) => {
  try {
    const { advices, lifeProfile, situation, question, dilemmaContext } = req.body;
    
    if (!advices || !Array.isArray(advices) || !lifeProfile) {
      return res.status(400).json({ error: 'advices (–º–∞—Å—Å–∏–≤) –∏ lifeProfile –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const adviceChain = langChainFactory.getAdviceAnalysisChain();
    const comparison = await adviceChain.compareAndChooseAdvice(
      advices,
      lifeProfile,
      situation || '–°–ª–æ–∂–Ω–∞—è –∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è',
      question || '–ß—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å?',
      dilemmaContext || '–ù—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ'
    );
    
    console.log('‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    res.json(comparison);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤' });
  }
});

// üîÑ –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–æ–≤–µ—Ç–æ–≤
app.post('/api/analyze-all-advices', async (req: Request, res: Response) => {
  try {
    const { advices, lifeProfile, situation, question, dilemmaContext } = req.body;
    
    if (!advices || !Array.isArray(advices) || !lifeProfile) {
      return res.status(400).json({ error: 'advices (–º–∞—Å—Å–∏–≤) –∏ lifeProfile –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const adviceChain = langChainFactory.getAdviceAnalysisChain();
    const analyses = await adviceChain.analyzeAllAdvices(
      advices,
      lifeProfile,
      situation || '–°–ª–æ–∂–Ω–∞—è –∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è',
      question || '–ß—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å?',
      dilemmaContext || '–ù—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ'
    );
    
    console.log('‚úÖ –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω');
    res.json(analyses);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞' });
  }
});

// üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req: Request, res: Response) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    langChain: 'initialized'
  });
});

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  console.log(`üöÄ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`üì° LangChain —Ñ–∞–±—Ä–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞`);
  console.log(`üß¨ –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:`);
  console.log(`   POST /api/generate-life`);
  console.log(`   POST /api/generate-dilemma`);
  console.log(`   POST /api/analyze-advice`);
  console.log(`   POST /api/compare-advices`);
  console.log(`   POST /api/analyze-all-advices`);
  console.log(`   GET  /api/health`);
});
