import { CharacterValue } from '../types/characterValue';
import {
  ValueName
} from '../types/valueName';
import {
  ValueCategory,
  ValueTypeKind,
  ValueSourceKind,
  ValueSphere,
  EmotionalTone,
  ValueStability
} from '../types/characterValueEnums';
import { randomItem, randomBool, randomInt } from './randomUtils';

/**
 * üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã CharacterValue –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø–æ–ª—è.
 */
export function generateCharacterValue(): CharacterValue {
  const name = randomItem(Object.values(ValueName));

  const type = inferType(name);
  const source = inferSource(name);
  const category = inferCategory(name);
  const sphere = inferSphere(name);
  const emotionalTone = inferTone(name, category);
  const stability = inferStability(source);
  const measurable = inferMeasurability(sphere);
  const valueScore = generateValueScore();

  return {
    name,
    type,
    source,
    category,
    sphere,
    emotionalTone,
    stability,
    measurable,
    valueScore
  };
}

// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî INFERENCING METHODS ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

/**
 * üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ü–µ–Ω–Ω–æ—Å—Ç–∏: terminal/instrumental.
 * üí° –ò–¥–µ—è: –µ—Å–ª–∏ —Ü–µ–Ω–Ω–æ—Å—Ç—å ‚Äî —Ü–µ–ª—å –∂–∏–∑–Ω–∏ (freedom), ‚Üí terminal;
 * –µ—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è (honesty), ‚Üí instrumental.
 */
function inferType(name: ValueName): ValueTypeKind[] {
  const terminalNames: ValueName[] = [
    ValueName.Freedom, ValueName.Honor, ValueName.Justice,
    ValueName.Independence, ValueName.Equality
  ];
  const instrumentalNames: ValueName[] = [
    ValueName.Honesty, ValueName.Responsibility, ValueName.Obedience,
    ValueName.Tolerance
  ];

  if (terminalNames.includes(name)) return [ValueTypeKind.Terminal];
  if (instrumentalNames.includes(name)) return [ValueTypeKind.Instrumental];

  return randomBool()
    ? [ValueTypeKind.Terminal]
    : [ValueTypeKind.Terminal, ValueTypeKind.Instrumental];
}

/**
 * üß¨ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ —Ü–µ–Ω–Ω–æ—Å—Ç–∏: –æ—Ç–∫—É–¥–∞ –æ–Ω–∞ –±–µ—Ä—ë—Ç—Å—è.
 * üí° –ò–¥–µ—è:
 * - biological: –≤—Ä–æ–∂–¥—ë–Ω–Ω—ã–µ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏—è (curiosity);
 * - social: –Ω–∞–≤—è–∑–∞–Ω–æ –æ–±—â–µ—Å—Ç–≤–æ–º (obedience);
 * - experience: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–±—ã—Ç–∏–π (honesty, compassion).
 */
function inferSource(name: ValueName): ValueSourceKind[] {
  if ([ValueName.Curiosity, ValueName.Independence].includes(name)) return [ValueSourceKind.Biological];
  if ([ValueName.Obedience, ValueName.Tradition, ValueName.Responsibility].includes(name)) return [ValueSourceKind.Social];
  if ([ValueName.Honesty, ValueName.Compassion, ValueName.Wisdom].includes(name)) return [ValueSourceKind.Experience, ValueSourceKind.Social];

  return [randomItem([
    ValueSourceKind.Biological,
    ValueSourceKind.Social,
    ValueSourceKind.Experience
  ])];
}

/**
 * üß≠ –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –®–≤–∞—Ä—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏.
 * üí° –ò–¥–µ—è: —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –±–ª–∏–∑–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ ‚Üí –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è.
 */
function inferCategory(name: ValueName): ValueCategory {
  const map: Partial<Record<ValueName, ValueCategory>> = {
    [ValueName.Honesty]: ValueCategory.Conformity,
    [ValueName.Freedom]: ValueCategory.SelfDirection,
    [ValueName.Power]: ValueCategory.Power,
    [ValueName.Compassion]: ValueCategory.Benevolence,
    [ValueName.Justice]: ValueCategory.Universalism,
    [ValueName.Obedience]: ValueCategory.Tradition,
    [ValueName.Tolerance]: ValueCategory.Universalism,
    [ValueName.Achievement]: ValueCategory.Achievement,
    [ValueName.Loyalty]: ValueCategory.Benevolence,
    [ValueName.SelfExpression]: ValueCategory.SelfDirection,
    [ValueName.Responsibility]: ValueCategory.Conformity,
    [ValueName.Mercy]: ValueCategory.Benevolence,
    [ValueName.Equality]: ValueCategory.Universalism,
    [ValueName.Friendship]: ValueCategory.Benevolence,
    [ValueName.Leadership]: ValueCategory.Power,
    [ValueName.Order]: ValueCategory.Security,
    [ValueName.Faithfulness]: ValueCategory.Tradition,
    [ValueName.Wisdom]: ValueCategory.SelfDirection,
    [ValueName.Security]: ValueCategory.Security,
    [ValueName.Tradition]: ValueCategory.Tradition,
    [ValueName.Ambition]: ValueCategory.Achievement,
    [ValueName.Prestige]: ValueCategory.Power,
    [ValueName.Honor]: ValueCategory.Conformity,
    [ValueName.Harmony]: ValueCategory.Universalism,
    [ValueName.Curiosity]: ValueCategory.Stimulation,
    [ValueName.Pleasure]: ValueCategory.Hedonism,
    [ValueName.Humility]: ValueCategory.Tradition,
    [ValueName.Independence]: ValueCategory.SelfDirection
  };

  return map[name] ?? ValueCategory.Universalism;
}

/**
 * üï∏ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≥–¥–µ —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è: –ª–∏—á–Ω–æ–µ, —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –∏ —Ç.–ø.
 * üí° –ò–¥–µ—è: —Ä–∞–∑–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–π —Ä–∞–¥–∏—É—Å –¥–µ–π—Å—Ç–≤–∏—è.
 */
function inferSphere(name: ValueName): ValueSphere {
  if ([ValueName.Honesty, ValueName.Freedom, ValueName.Wisdom, ValueName.Independence].includes(name))
    return ValueSphere.Personal;
  if ([ValueName.Compassion, ValueName.Friendship, ValueName.Mercy, ValueName.Tolerance].includes(name))
    return ValueSphere.Interpersonal;
  if ([ValueName.Obedience, ValueName.Justice, ValueName.Tradition, ValueName.Order].includes(name))
    return ValueSphere.Societal;

  return randomItem([
    ValueSphere.Personal,
    ValueSphere.Interpersonal,
    ValueSphere.Societal
  ]);
}

/**
 * ‚ù§Ô∏è –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é —Ü–µ–Ω–Ω–æ—Å—Ç–∏.
 * üí° –ò–¥–µ—è: –∫–∞–∂–¥–æ–µ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–æ —Å—Ç—Ä–∞—Ö–æ–º, –∏–Ω—Ç–µ—Ä–µ—Å–æ–º, —ç–º–ø–∞—Ç–∏–µ–π –∏ —Ç.–ø.
 */
function inferTone(name: ValueName, category: ValueCategory): EmotionalTone {
  if ([ValueName.Security, ValueName.Order, ValueName.Obedience].includes(name))
    return EmotionalTone.AnxietyBased;
  if ([ValueName.Freedom, ValueName.Curiosity, ValueName.Wisdom, ValueName.SelfExpression].includes(name))
    return EmotionalTone.GrowthOriented;
  if ([ValueName.Compassion, ValueName.Mercy, ValueName.Friendship].includes(name))
    return EmotionalTone.Altruistic;
  if ([ValueName.Pleasure].includes(name))
    return EmotionalTone.Hedonistic;

  return randomItem([
    EmotionalTone.GrowthOriented,
    EmotionalTone.AnxietyBased,
    EmotionalTone.Altruistic
  ]);
}

/**
 * üß± –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º.
 * üí° –ò–¥–µ—è: –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏ —Ç—Ä–∞–≤–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —á–∞—â–µ —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ.
 */
function inferStability(source: ValueSourceKind[]): ValueStability {
  if (source.includes(ValueSourceKind.Biological)) return ValueStability.High;
  if (source.includes(ValueSourceKind.Experience)) return ValueStability.Medium;
  return ValueStability.Low;
}

/**
 * üìè –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ—Ä–∏—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏.
 * üí° –ò–¥–µ—è: –ª–∏—á–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —Ç—Ä—É–¥–Ω–µ–µ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, —á–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ.
 */
function inferMeasurability(sphere: ValueSphere): boolean {
  return sphere !== ValueSphere.Personal;
}

/**
 * üéö –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ (0‚Äì100).
 * üí° –ò–¥–µ—è: —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Å–∏–ª–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ä–µ–¥–Ω–µ-–≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–π.
 */
function generateValueScore(): number {
  return randomInt(40, 80);
}
