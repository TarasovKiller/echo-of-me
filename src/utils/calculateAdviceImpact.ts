// src/utils/calculateAdviceImpact.ts
import { LifeTraits, AdviceImpact } from '../types/life';

export function calculateAdviceImpact(advice: string, lifeTraits: LifeTraits, importance: number): AdviceImpact {
  // üî¨ –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤ —Å —á–µ—Ä—Ç–∞–º–∏
  const traitKeywords: Record<keyof LifeTraits, string[]> = {
    courage: ['—Å–º–µ–ª–æ', '—Å—Ç—Ä–∞—Ö', '—Ä–∏—Å–∫—É–π', '–±–æ–π—Å—è'],
    empathy: ['–ø–æ—á—É–≤—Å—Ç–≤—É–π', '—Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ', '–ø–æ–π–º–∏', '—Å–æ–∂–∞–ª–µ—é'],
    independence: ['—Å–∞–º–∞', '—Å–∞–º', '–æ–¥–∏–Ω', '—Ä–µ—à–∏', '—Å–≤–æ–±–æ–¥–∞'],
    guilt: ['–≤–∏–Ω–∞', '–ø—Ä–æ—Å—Ç–∏', '–∏—Å–∫—É–ø–ª–µ–Ω–∏–µ', '–Ω–∞–∫–∞–∑–∞–Ω–∏–µ'],
    trust: ['–¥–æ–≤–µ—Ä–∏–µ', '–≤–µ—Ä—å', '–ø–æ–¥–¥–µ—Ä–∂–∏', '–æ—Ç–∫—Ä–æ–π—Å—è'],
  };

  const matchedTraits: (keyof LifeTraits)[] = [];

  for (const trait in traitKeywords) {
    if (traitKeywords[trait as keyof LifeTraits].some((word) => advice.toLowerCase().includes(word))) {
      matchedTraits.push(trait as keyof LifeTraits);
    }
  }

  const resonanceScore = Math.min(100, matchedTraits.length * 20); // 20 –±–∞–ª–ª–æ–≤ –∑–∞ –∫–∞–∂–¥—É—é —Å–æ–≤–ø–∞–≤—à—É—é —á–µ—Ä—Ç—É
  const importanceMultiplier = importance;

  // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç: +1 –∫ –∫–∞–∂–¥–æ–π –∑–∞–¥–µ—Ç–æ–π —á–µ—Ä—Ç–µ
  const emotionalEffect: Partial<LifeTraits> = {};
  matchedTraits.forEach((trait) => {
    emotionalEffect[trait] = 1;
  });

  const soulShift = (resonanceScore / 100) * importanceMultiplier; // –æ—Ç 0 –¥–æ 1

  return {
    resonanceScore,
    matchedTraits,
    importanceMultiplier,
    emotionalEffect,
    soulShift,
  };
}
