import { ChatOpenAI } from '@langchain/openai';
import { PromptTemplate } from '@langchain/core/prompts';
import { RunnableSequence } from '@langchain/core/runnables';
import { JsonOutputParser } from '@langchain/core/output_parsers';
import { LifeProfile, AdviceImpact } from '../../types/life';
import { AdviceAnalysisResult, AdviceComparisonResult } from '../../types/advice';

// üéØ –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–ª–∏—è–Ω–∏—è —Å–æ–≤–µ—Ç–∞
const ADVICE_ANALYSIS_PROMPT = PromptTemplate.fromTemplate(`
–¢—ã ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å –ø–æ–¥—Ä–æ—Å—Ç–∫–∞ –ø–æ –∏–º–µ–Ω–∏ {name}, —Ç–µ–±–µ {age} –ª–µ—Ç.  
–¢–≤–æ—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è: "{philosophy}".

–¢—ã –æ–∫–∞–∑–∞–ª—Å—è(–∞—Å—å) –≤ —Å–∏—Ç—É–∞—Ü–∏–∏:  
üìç "{situation}"

–¢—ã –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:  
‚ùì "{question}"

–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–ª–µ–º–º—ã:
{dilemmaContext}

–¢—ã –ø–æ–ª—É—á–∏–ª(–∞) —Å–æ–≤–µ—Ç:  
üí≠ "{advice}"

---

–í–æ—Ç —Ç–≤–æ–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
- –ì–ª–∞–≤–Ω—ã–π —Å—Ç—Ä–∞—Ö: "{coreFear}"
- –°–∫—Ä—ã—Ç–æ–µ –∂–µ–ª–∞–Ω–∏–µ: "{hiddenDesire}"
- –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: {coreTraits}
- –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è (trust): {trust}
- –ú–æ—Ä–∞–ª—å–Ω—ã–π –∫–æ–º–ø–∞—Å: "{moralCompass}"
- –û—Å–æ–∑–Ω–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è: {awarenessLevel}

---

üìå –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, –∫–∞–∫ —ç—Ç–æ—Ç —Å–æ–≤–µ—Ç –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–µ–±—è:

1. **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è**: –ß—Ç–æ —Ç—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª(–∞), –∫–æ–≥–¥–∞ –ø—Ä–æ—á–∏—Ç–∞–ª(–∞) —ç—Ç–æ—Ç —Å–æ–≤–µ—Ç?
2. **–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞**: –ö–∞–∫ —ç—Ç–æ —Å–æ–æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Å —Ç–≤–æ–∏–º–∏ —Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏ –∏ —É–±–µ–∂–¥–µ–Ω–∏—è–º–∏?
3. **–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è**: –ö —á–µ–º—É —ç—Ç–æ —Ç–µ–±—è –ø–æ–¥—Ç–∞–ª–∫–∏–≤–∞–µ—Ç?
4. **–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç**: –ï—Å—Ç—å –ª–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è —Å —Ç–≤–æ–∏–º–∏ —Å—Ç—Ä–∞—Ö–∞–º–∏ –∏–ª–∏ –∂–µ–ª–∞–Ω–∏—è–º–∏?

---

üì¶ –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ ‚Äî —Å—Ç—Ä–æ–≥–æ JSON:

{{
  "resonanceScore": number (0-100, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–µ—Ç "–∑–∞–¥–µ–ª"),
  "matchedTraits": string[] (–∫–∞–∫–∏–µ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã),
  "importanceMultiplier": number (1-5, –≤–∞–∂–Ω–æ—Å—Ç—å —Å–æ–≤–µ—Ç–∞),
  "emotionalEffect": {{
    "courage": number (-10 –¥–æ +10),
    "empathy": number (-10 –¥–æ +10),
    "independence": number (-10 –¥–æ +10),
    "guilt": number (-10 –¥–æ +10),
    "trust": number (-10 –¥–æ +10),
    "impulsivity": number (-10 –¥–æ +10),
    "manipulativeness": number (-10 –¥–æ +10),
    "shame": number (-10 –¥–æ +10),
    "resilience": number (-10 –¥–æ +10)
  }},
  "soulShift": number (-5 –¥–æ +5, –æ–±—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–≤–∏—Ç–∏—è),
  "internalReaction": {{
    "emotionalResponse": string (–æ–ø–∏—Å–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤),
    "cognitiveAssessment": string (–º—ã—Å–ª–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞),
    "behavioralTendency": string (–∫ —á–µ–º—É —Å–∫–ª–æ–Ω—è–µ—à—å—Å—è),
    "conflictLevel": number (0-100, —É—Ä–æ–≤–µ–Ω—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞)
  }},
  "memoryFormation": {{
    "willRemember": boolean,
    "emotionalEcho": "–∑–∞—Ç—Ä–æ–Ω—É–ª–æ" | "–æ—Å—Ç–∞–≤–∏–ª–æ —Å–æ–º–Ω–µ–Ω–∏–µ" | "–æ—Ç–≤–µ—Ä–≥–Ω—É—Ç–æ" | "–≤–¥–æ—Ö–Ω–æ–≤–∏–ª–æ",
    "keyPhrase": string (—á—Ç–æ –∑–∞–ø–æ–º–Ω–∏—Ç—Å—è),
    "association": string (—Å —á–µ–º —Å–≤—è–∂–µ—à—å)
  }}
}}

‚ö†Ô∏è –¢–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –±–µ–∑ Markdown, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
`);

// üéØ –ü—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤
const ADVICE_COMPARISON_PROMPT = PromptTemplate.fromTemplate(`
–¢—ã ‚Äî –ø–æ–¥—Ä–æ—Å—Ç–æ–∫ –ø–æ –∏–º–µ–Ω–∏ {name}, —Ç–µ–±–µ {age} –ª–µ—Ç.  
–¢–≤–æ—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è: "{philosophy}".

–¢—ã –æ–∫–∞–∑–∞–ª—Å—è(–∞—Å—å) –≤ —Å–∏—Ç—É–∞—Ü–∏–∏:  
üìç "{situation}"

–¢—ã –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:  
‚ùì "{question}"

–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–ª–µ–º–º—ã:
{dilemmaContext}

–í–æ—Ç —Å–æ–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –ø–æ–ª—É—á–∏–ª(–∞):  
{adviceList}

---

–í–æ—Ç —Ç–≤–æ–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
- –ì–ª–∞–≤–Ω—ã–π —Å—Ç—Ä–∞—Ö: "{coreFear}"
- –°–∫—Ä—ã—Ç–æ–µ –∂–µ–ª–∞–Ω–∏–µ: "{hiddenDesire}"
- –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: {coreTraits}
- –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è (trust): {trust}
- –ú–æ—Ä–∞–ª—å–Ω—ã–π –∫–æ–º–ø–∞—Å: "{moralCompass}"
- –û—Å–æ–∑–Ω–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è: {awarenessLevel}

---

üìå –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥—ã–π —Å–æ–≤–µ—Ç –∏ –≤—ã–±–µ—Ä–∏ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–µ–∑–æ–Ω–∏—Ä—É–µ—Ç —Å —Ç–æ–±–æ–π:

1. –ö–∞–∫–æ–π —Å–æ–≤–µ—Ç –ª—É—á—à–µ –≤—Å–µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–≤–æ–µ–º—É —Å–∫—Ä—ã—Ç–æ–º—É –∂–µ–ª–∞–Ω–∏—é?
2. –ö–∞–∫–æ–π —Å–æ–≤–µ—Ç –º–µ–Ω—å—à–µ –≤—Å–µ–≥–æ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç —Ç–≤–æ–∏ —Å—Ç—Ä–∞—Ö–∏?
3. –ö–∞–∫–æ–π —Å–æ–≤–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–≤–æ—é —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é?
4. –ö–∞–∫–æ–π —Å–æ–≤–µ—Ç –¥–∞—ë—Ç —Ç–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Å–∏–ª –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏?

---

üì¶ –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ ‚Äî —Å—Ç—Ä–æ–≥–æ JSON:

{{
  "chosenAdviceIndex": number (–∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞, –Ω–∞—á–∏–Ω–∞—è —Å 0),
  "reasoning": string (–ø–æ—á–µ–º—É –≤—ã–±—Ä–∞–ª –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Å–æ–≤–µ—Ç),
  "reactions": [
    {{
      "adviceIndex": number,
      "resonanceScore": number (0-100),
      "resonatesWith": {{
        "desire": boolean,
        "fear": boolean,
        "philosophy": boolean
      }},
      "emotionalEffect": {{ "trait": number, ... }},
      "soulVectorChange": number,
      "reactionText": string,
      "reasoningLog": [string]
    }}
  ],
  "finalDecision": {{
    "chosenAdvice": string,
    "confidence": number (0-100),
    "emotionalState": string,
    "expectedOutcome": string
  }}
}}

‚ö†Ô∏è –¢–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –±–µ–∑ Markdown, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
`);

export class AdviceAnalysisChain {
  private model: ChatOpenAI;
  private jsonParser: JsonOutputParser;

  constructor(apiKey: string, model = 'gpt-4o-mini') {
    this.model = new ChatOpenAI({
      apiKey,
      model,
      configuration: {
        baseURL: process.env.OPENAI_BASE_URL || 'https://openrouter.ai/api/v1',
        defaultHeaders: {
          'HTTP-Referer': process.env.HTTP_REFERER || 'http://localhost:3000',
          'X-Title': 'echo-of-me',
        },
      },
    });
    this.jsonParser = new JsonOutputParser();
  }

  /**
   * üß† –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞
   */
  async analyzeSingleAdvice(
    advice: string,
    lifeProfile: LifeProfile,
    situation: string,
    question: string,
    dilemmaContext: string
  ): Promise<AdviceAnalysisResult> {
    const analysisChain = RunnableSequence.from([
      ADVICE_ANALYSIS_PROMPT,
      this.model,
      this.jsonParser,
    ]);

    const result = await analysisChain.invoke({
      name: lifeProfile.name,
      age: lifeProfile.age,
      philosophy: lifeProfile.philosophy,
      situation,
      question,
      dilemmaContext,
      advice,
      coreFear: lifeProfile.coreFear,
      hiddenDesire: lifeProfile.hiddenDesire,
      coreTraits: JSON.stringify(lifeProfile.coreTraits),
      trust: lifeProfile.coreTraits.trust,
      moralCompass: lifeProfile.moralCompass.value,
      awarenessLevel: lifeProfile.awarenessLevel,
    }) as AdviceAnalysisResult;

    return result;
  }

  /**
   * üéØ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏ –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —Å–æ–≤–µ—Ç–∞
   */
  async compareAndChooseAdvice(
    advices: string[],
    lifeProfile: LifeProfile,
    situation: string,
    question: string,
    dilemmaContext: string
  ): Promise<AdviceComparisonResult> {
    const comparisonChain = RunnableSequence.from([
      ADVICE_COMPARISON_PROMPT,
      this.model,
      this.jsonParser,
    ]);

    const adviceList = advices
      .map((advice, index) => `${index + 1}. ${advice}`)
      .join('\n');

    const result = await comparisonChain.invoke({
      name: lifeProfile.name,
      age: lifeProfile.age,
      philosophy: lifeProfile.philosophy,
      situation,
      question,
      dilemmaContext,
      adviceList,
      coreFear: lifeProfile.coreFear,
      hiddenDesire: lifeProfile.hiddenDesire,
      coreTraits: JSON.stringify(lifeProfile.coreTraits),
      trust: lifeProfile.coreTraits.trust,
      moralCompass: lifeProfile.moralCompass.value,
      awarenessLevel: lifeProfile.awarenessLevel,
    }) as AdviceComparisonResult;

    return result;
  }

  /**
   * üîÑ –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–æ–≤–µ—Ç–æ–≤
   */
  async analyzeAllAdvices(
    advices: string[],
    lifeProfile: LifeProfile,
    situation: string,
    question: string,
    dilemmaContext: string
  ): Promise<AdviceAnalysisResult[]> {
    const analysisPromises = advices.map(advice =>
      this.analyzeSingleAdvice(advice, lifeProfile, situation, question, dilemmaContext)
    );

    return Promise.all(analysisPromises);
  }
} 