import React, { useEffect } from 'react';
import { useGameState } from '../hooks/useGameState';
import { GamePhase } from '../constants/gamePhases';
import { dilemmas } from '../constants/dilemmas'; // üëà –î–æ–±–∞–≤—å —ç—Ç–æ


const ScenePhase: React.FC = () => {
  const { gameState, setGameState } = useGameState();

  useEffect(() => {
    // –ï—Å–ª–∏ –≤ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω–µ –µ—â—ë –Ω–µ—Ç –¥–∏–ª–µ–º–º—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
    if (!gameState.scenes[gameState.currentScene].dilemma) {
      const randomDilemma =
        dilemmas[gameState.currentScene % dilemmas.length]; // üëà –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–±
  
      const newScenes = gameState.scenes.map((scene, index) =>
        index === gameState.currentScene
          ? { ...scene, dilemma: randomDilemma }
          : scene
      );

      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è—è scenes
      const newState = { ...gameState, scenes: newScenes };

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –¥–∏–ª–µ–º–º–∞ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∞—Å—å
      setGameState(newState);

      // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–∞–∑—É –Ω–∞ Advice
      setTimeout(() => {
        const nextState = { ...newState, phase: GamePhase.Advice };
        setGameState(nextState);
      }, 3000);
    }
  }, [gameState, setGameState]);

  return (
    <div>
      <p>–¢–µ–∫—É—â–∞—è –¥–∏–ª–µ–º–º–∞: {gameState.scenes[gameState.currentScene].dilemma}</p>
    </div>
  );
};

export default ScenePhase;
