// src/models/Life.ts

import { LifeTraits, AdviceImpact, LifeProfile } from '../types/life';

export class Life {
  private name: string;
  private gender: 'male' | 'female' | 'nonbinary';
  private age: number;
  private culture: LifeProfile['culture'];
  private atmosphere: string;

  private traits: LifeTraits;
  private hiddenDesire: string;
  private soulVector: number;
  private memory: string[] = [];

  private coreFear: string;
  private philosophy: string;
  private selfNarrative: string;
  private awarenessLevel: LifeProfile['awarenessLevel'];

  constructor(profile: LifeProfile) {
    this.name = profile.name;
    this.gender = profile.gender;
    this.age = profile.age;
    this.culture = profile.culture;
    this.atmosphere = profile.atmosphere;

    this.traits = profile.coreTraits;
    this.hiddenDesire = profile.hiddenDesire;
    this.soulVector = 0;

    this.coreFear = profile.coreFear;
    this.philosophy = profile.philosophy;
    this.selfNarrative = profile.selfNarrative;
    this.awarenessLevel = profile.awarenessLevel;
  }

  // üß† –ü–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
  public getProfile(): LifeProfile {
    return {
      name: this.name,
      gender: this.gender,
      age: this.age,
      culture: this.culture,
      atmosphere: this.atmosphere,
      coreTraits: this.traits,
      hiddenDesire: this.hiddenDesire,
      coreFear: this.coreFear,
      philosophy: this.philosophy,
      selfNarrative: this.selfNarrative,
      awarenessLevel: this.awarenessLevel,
    };
  }

  // ü©π –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ —Å–æ–≤–µ—Ç–∞
  public applyAdviceImpact(impact: AdviceImpact, adviceText: string): void {
    for (const trait in impact.emotionalEffect) {
      const key = trait as keyof LifeTraits;
      this.traits[key] += impact.emotionalEffect[key]!;
    }

    this.soulVector += impact.soulShift;
    this.memory.push(adviceText);
  }

  // üîç –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ –¥—É—à–∏
  public getSoulVector(): number {
    return parseFloat(this.soulVector.toFixed(2));
  }

  // üß† –ü–æ–ª—É—á–∏—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
  public getMemory(): string[] {
    return [...this.memory];
  }

  // üó£ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å –ñ–∏–∑–Ω–∏
  public describeSelf(): string {
    return `–ú–µ–Ω—è –∑–æ–≤—É—Ç ${this.name}. –Ø —á–∞—Å—Ç–æ –¥—É–º–∞—é: "${this.philosophy}". –ù–æ –≤ –≥–ª—É–±–∏–Ω–µ... —è –±–æ—é—Å—å ${this.coreFear}.`;
  }

  // üß¨ JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
  public toJSON(): object {
    return {
      name: this.name,
      gender: this.gender,
      age: this.age,
      atmosphere: this.atmosphere,
      culture: this.culture,
      traits: this.traits,
      hiddenDesire: this.hiddenDesire,
      soulVector: this.getSoulVector(),
      memory: this.getMemory(),
      coreFear: this.coreFear,
      philosophy: this.philosophy,
      selfNarrative: this.selfNarrative,
      awarenessLevel: this.awarenessLevel,
    };
  }

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∞ —Å–æ–≤–µ—Ç–∞ (–ø—Ä–∏–º–µ—Ä–Ω—ã–π API)
  public resonatesWith(text: string): boolean {
    return text.toLowerCase().includes(this.hiddenDesire.toLowerCase());
  }
}
